
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 01 21:42:19 BRST 2012
//----------------------------------------------------

package Parse;

import ErrorMsg.Pos;
import Util.Lst;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 01 21:42:19 BRST 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\010\000\002\002\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\004\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\010\000\002\002\006\000" +
    "\002\002\007\000\002\002\005\000\002\002\004\000\002" +
    "\002\005\000\002\002\013\000\002\002\014\000\002\002" +
    "\015\000\002\002\013\000\002\002\011\000\002\002\012" +
    "\000\002\002\013\000\002\002\011\000\002\002\006\000" +
    "\002\003\003\000\002\003\006\000\002\003\006\000\002" +
    "\003\005\000\002\027\004\000\002\027\002\000\002\030" +
    "\005\000\002\030\002\000\002\004\004\000\002\004\002" +
    "\000\002\005\006\000\002\006\005\000\002\006\002\000" +
    "\002\022\003\000\002\010\004\000\002\010\002\000\002" +
    "\023\005\000\002\024\004\000\002\024\002\000\002\025" +
    "\005\000\002\025\002\000\002\007\003\000\002\007\005" +
    "\000\002\007\005\000\002\011\007\000\002\011\011\000" +
    "\002\012\012\000\002\013\004\000\002\013\003\000\002" +
    "\014\006\000\002\015\004\000\002\015\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\016\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\020\003\000\002\020\004\000\002\020\004\000\002" +
    "\017\003\000\002\017\004\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\026\004\006\005\012\006\014\010\004\025" +
    "\016\033\013\036\015\050\010\053\007\056\005\001\002" +
    "\000\026\004\006\005\012\006\014\010\004\025\016\033" +
    "\013\036\015\050\010\053\007\056\005\001\002\000\004" +
    "\025\230\001\002\000\074\002\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\023\uffff\026\uffff\030\uffff\034\uffff\035" +
    "\uffff\037\uffff\040\uffff\042\uffff\043\uffff\045\uffff\046\uffff" +
    "\047\uffff\054\uffff\055\uffff\057\uffff\060\uffff\061\uffff\001" +
    "\002\000\004\006\212\001\002\000\074\002\000\007\000" +
    "\010\000\011\000\012\000\014\000\015\000\016\000\017" +
    "\000\020\000\021\000\022\000\023\000\026\000\030\000" +
    "\034\000\035\000\037\000\040\000\042\000\043\000\045" +
    "\000\046\000\047\000\054\000\055\000\057\000\060\000" +
    "\061\000\001\002\000\034\002\211\007\027\010\024\011" +
    "\033\012\031\014\026\015\034\016\035\017\030\020\032" +
    "\021\025\022\023\023\036\001\002\000\074\002\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\026\ufffe\030" +
    "\ufffe\034\ufffe\035\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\054\ufffe\055\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\001\002\000\026\004\006\005\012\006\014" +
    "\010\004\025\016\033\013\036\015\050\010\053\007\056" +
    "\005\001\002\000\104\002\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\166\026\uffde\027\165" +
    "\030\uffde\034\uffde\035\uffde\037\uffde\040\uffde\042\uffde\043" +
    "\uffde\044\167\045\uffde\046\uffde\047\uffde\054\uffde\055\uffde" +
    "\057\uffde\060\uffde\061\uffde\001\002\000\010\045\076\046" +
    "\101\047\077\001\002\000\030\004\006\005\012\006\014" +
    "\010\004\025\016\026\057\033\013\036\015\050\010\053" +
    "\007\056\005\001\002\000\100\002\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\021\026\ufffc\027\020" +
    "\030\ufffc\034\ufffc\035\ufffc\037\ufffc\040\ufffc\042\ufffc\043" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\054\ufffc\055\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\001\002\000\026\004\006\005\012\006" +
    "\014\010\004\025\016\033\013\036\015\050\010\053\007" +
    "\056\005\001\002\000\026\004\006\005\012\006\014\010" +
    "\004\025\016\033\013\036\015\050\010\053\007\056\005" +
    "\001\002\000\074\002\ufffb\007\027\010\024\011\033\012" +
    "\031\014\026\015\034\016\035\017\030\020\032\021\025" +
    "\022\023\023\036\026\ufffb\030\ufffb\034\ufffb\035\ufffb\037" +
    "\ufffb\040\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002\000" +
    "\026\004\006\005\012\006\014\010\004\025\016\033\013" +
    "\036\015\050\010\053\007\056\005\001\002\000\026\004" +
    "\006\005\012\006\014\010\004\025\016\033\013\036\015" +
    "\050\010\053\007\056\005\001\002\000\026\004\006\005" +
    "\012\006\014\010\004\025\016\033\013\036\015\050\010" +
    "\053\007\056\005\001\002\000\026\004\006\005\012\006" +
    "\014\010\004\025\016\033\013\036\015\050\010\053\007" +
    "\056\005\001\002\000\026\004\006\005\012\006\014\010" +
    "\004\025\016\033\013\036\015\050\010\053\007\056\005" +
    "\001\002\000\026\004\006\005\012\006\014\010\004\025" +
    "\016\033\013\036\015\050\010\053\007\056\005\001\002" +
    "\000\026\004\006\005\012\006\014\010\004\025\016\033" +
    "\013\036\015\050\010\053\007\056\005\001\002\000\026" +
    "\004\006\005\012\006\014\010\004\025\016\033\013\036" +
    "\015\050\010\053\007\056\005\001\002\000\026\004\006" +
    "\005\012\006\014\010\004\025\016\033\013\036\015\050" +
    "\010\053\007\056\005\001\002\000\026\004\006\005\012" +
    "\006\014\010\004\025\016\033\013\036\015\050\010\053" +
    "\007\056\005\001\002\000\026\004\006\005\012\006\014" +
    "\010\004\025\016\033\013\036\015\050\010\053\007\056" +
    "\005\001\002\000\026\004\006\005\012\006\014\010\004" +
    "\025\016\033\013\036\015\050\010\053\007\056\005\001" +
    "\002\000\074\002\uffee\007\027\010\024\011\033\012\031" +
    "\014\026\015\034\016\035\017\030\020\032\021\025\022" +
    "\023\023\uffee\026\uffee\030\uffee\034\uffee\035\uffee\037\uffee" +
    "\040\uffee\042\uffee\043\uffee\045\uffee\046\uffee\047\uffee\054" +
    "\uffee\055\uffee\057\uffee\060\uffee\061\uffee\001\002\000\060" +
    "\002\ufff3\007\027\010\024\011\033\012\031\022\ufff3\023" +
    "\ufff3\026\ufff3\030\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3" +
    "\042\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\054\ufff3\055" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000\060\002\ufff4" +
    "\007\027\010\024\011\033\012\031\022\ufff4\023\ufff4\026" +
    "\ufff4\030\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\042\ufff4" +
    "\043\ufff4\045\ufff4\046\ufff4\047\ufff4\054\ufff4\055\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\001\002\000\074\002\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\026\ufff8\030\ufff8" +
    "\034\ufff8\035\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\054\ufff8\055\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\001\002\000\060\002\ufff1\007\027\010\024\011" +
    "\033\012\031\022\ufff1\023\ufff1\026\ufff1\030\ufff1\034\ufff1" +
    "\035\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\054\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\001\002\000\074\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\026\ufff7\030\ufff7\034\ufff7\035\ufff7\037" +
    "\ufff7\040\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\054\ufff7\055\ufff7\057\ufff7\060\ufff7\061\ufff7\001\002\000" +
    "\060\002\ufff2\007\027\010\024\011\033\012\031\022\ufff2" +
    "\023\ufff2\026\ufff2\030\ufff2\034\ufff2\035\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2\054\ufff2" +
    "\055\ufff2\057\ufff2\060\ufff2\061\ufff2\001\002\000\074\002" +
    "\ufffa\007\ufffa\010\ufffa\011\033\012\031\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\026" +
    "\ufffa\030\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\042\ufffa" +
    "\043\ufffa\045\ufffa\046\ufffa\047\ufffa\054\ufffa\055\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\060\002\ufff5\007\027" +
    "\010\024\011\033\012\031\022\ufff5\023\ufff5\026\ufff5\030" +
    "\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5\042\ufff5\043\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\054\ufff5\055\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\001\002\000\060\002\ufff0\007\027\010\024" +
    "\011\033\012\031\022\ufff0\023\ufff0\026\ufff0\030\ufff0\034" +
    "\ufff0\035\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\054\ufff0\055\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\001\002\000\074\002\ufff9\007\ufff9\010\ufff9\011\033" +
    "\012\031\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\026\ufff9\030\ufff9\034\ufff9\035\ufff9" +
    "\037\ufff9\040\ufff9\042\ufff9\043\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\054\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\001\002" +
    "\000\074\002\uffef\007\027\010\024\011\033\012\031\014" +
    "\026\015\034\016\035\017\030\020\032\021\025\022\uffef" +
    "\023\uffef\026\uffef\030\uffef\034\uffef\035\uffef\037\uffef\040" +
    "\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef\054\uffef" +
    "\055\uffef\057\uffef\060\uffef\061\uffef\001\002\000\034\007" +
    "\027\010\024\011\033\012\031\014\026\015\034\016\035" +
    "\017\030\020\032\021\025\022\023\023\036\030\054\001" +
    "\002\000\100\002\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\034\uffdc" +
    "\035\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\054\uffdc\055\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\001\002\000\036\007\027\010\024\011\033\012\031\014" +
    "\026\015\034\016\035\017\030\020\032\021\025\022\023" +
    "\023\036\026\061\042\062\001\002\000\004\026\060\001" +
    "\002\000\074\002\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\026\uffe9\030\uffe9\034\uffe9\035\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\054" +
    "\uffe9\055\uffe9\057\uffe9\060\uffe9\061\uffe9\001\002\000\074" +
    "\002\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\026\uffea\030\uffea\034\uffea\035\uffea\037\uffea\040\uffea\042" +
    "\uffea\043\uffea\045\uffea\046\uffea\047\uffea\054\uffea\055\uffea" +
    "\057\uffea\060\uffea\061\uffea\001\002\000\074\002\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8\030" +
    "\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\054\uffe8\055\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\001\002\000\026\004\006\005\012\006\014" +
    "\010\004\025\016\033\013\036\015\050\010\053\007\056" +
    "\005\001\002\000\036\007\027\010\024\011\033\012\031" +
    "\014\026\015\034\016\035\017\030\020\032\021\025\022" +
    "\023\023\036\026\uffd2\042\065\001\002\000\004\026\uffd4" +
    "\001\002\000\026\004\006\005\012\006\014\010\004\025" +
    "\016\033\013\036\015\050\010\053\007\056\005\001\002" +
    "\000\040\007\027\010\024\011\033\012\031\014\026\015" +
    "\034\016\035\017\030\020\032\021\025\022\023\023\036" +
    "\026\uffd2\040\uffd2\042\065\001\002\000\006\026\uffd3\040" +
    "\uffd3\001\002\000\010\037\uffb7\045\076\046\101\001\002" +
    "\000\012\037\uffbf\045\uffbf\046\uffbf\047\077\001\002\000" +
    "\012\037\uffbb\045\076\046\101\047\077\001\002\000\012" +
    "\037\uffc2\045\uffc2\046\101\047\uffc2\001\002\000\004\037" +
    "\uffbd\001\002\000\004\037\151\001\002\000\004\006\142" +
    "\001\002\000\004\006\130\001\002\000\004\037\uffbe\001" +
    "\002\000\004\006\106\001\002\000\004\037\uffbc\001\002" +
    "\000\010\037\uffb4\045\076\047\077\001\002\000\004\037" +
    "\uffb2\001\002\000\004\037\uffb3\001\002\000\004\025\107" +
    "\001\002\000\006\006\111\026\uffcc\001\002\000\004\026" +
    "\122\001\002\000\004\041\117\001\002\000\010\026\uffca" +
    "\032\uffca\043\113\001\002\000\004\006\111\001\002\000" +
    "\006\026\uffcd\032\uffcd\001\002\000\010\026\uffca\032\uffca" +
    "\043\113\001\002\000\006\026\uffcb\032\uffcb\001\002\000" +
    "\004\006\120\001\002\000\024\014\uffd1\024\uffd1\026\uffd1" +
    "\032\uffd1\037\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\001" +
    "\002\000\010\026\uffce\032\uffce\043\uffce\001\002\000\006" +
    "\014\uffcf\041\123\001\002\000\004\006\120\001\002\000" +
    "\004\014\125\001\002\000\026\004\006\005\012\006\014" +
    "\010\004\025\016\033\013\036\015\050\010\053\007\056" +
    "\005\001\002\000\042\007\027\010\024\011\033\012\031" +
    "\014\026\015\034\016\035\017\030\020\032\021\025\022" +
    "\023\023\036\037\uffc4\045\uffc4\046\uffc4\047\uffc4\001\002" +
    "\000\006\014\uffd0\024\uffd0\001\002\000\004\014\131\001" +
    "\002\000\010\006\120\031\133\051\135\001\002\000\012" +
    "\037\uffc1\045\uffc1\046\uffc1\047\uffc1\001\002\000\006\006" +
    "\111\032\uffcc\001\002\000\012\037\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\001\002\000\004\052\136\001\002\000\004\006" +
    "\120\001\002\000\012\037\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\001\002\000\004\032\141\001\002\000\012\037\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\001\002\000\006\024\uffcf\041\123" +
    "\001\002\000\004\024\144\001\002\000\030\004\006\005" +
    "\012\006\014\010\004\025\016\031\146\033\013\036\015" +
    "\050\010\053\007\056\005\001\002\000\042\007\027\010" +
    "\024\011\033\012\031\014\026\015\034\016\035\017\030" +
    "\020\032\021\025\022\023\023\036\037\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\001\002\000\006\006\111\032\uffcc\001\002" +
    "\000\004\032\150\001\002\000\012\037\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\001\002\000\030\004\006\005\012\006\014" +
    "\010\004\025\016\033\013\036\015\040\uffd5\050\010\053" +
    "\007\056\005\001\002\000\004\040\155\001\002\000\036" +
    "\007\027\010\024\011\033\012\031\014\026\015\034\016" +
    "\035\017\030\020\032\021\025\022\023\023\036\040\uffd2" +
    "\042\065\001\002\000\004\040\uffd6\001\002\000\074\002" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\026" +
    "\uffeb\030\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\042\uffeb" +
    "\043\uffeb\045\uffeb\046\uffeb\047\uffeb\054\uffeb\055\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\001\002\000\010\037\uffc3\045\uffc3" +
    "\047\uffc3\001\002\000\004\037\uffb9\001\002\000\004\037" +
    "\uffba\001\002\000\004\037\uffb8\001\002\000\010\037\uffc0" +
    "\045\uffc0\046\uffc0\001\002\000\004\037\uffb6\001\002\000" +
    "\004\037\uffb5\001\002\000\026\004\006\005\012\006\014" +
    "\010\004\025\016\033\013\036\015\050\010\053\007\056" +
    "\005\001\002\000\030\004\006\005\012\006\014\010\004" +
    "\025\016\026\uffd9\033\013\036\015\050\010\053\007\056" +
    "\005\001\002\000\004\006\170\001\002\000\100\002\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\034\uffdb\035\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb\054\uffdb" +
    "\055\uffdb\057\uffdb\060\uffdb\061\uffdb\001\002\000\036\007" +
    "\027\010\024\011\033\012\031\014\026\015\034\016\035" +
    "\017\030\020\032\021\025\022\023\023\036\026\uffd7\043" +
    "\175\001\002\000\004\026\173\001\002\000\074\002\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026\uffdf" +
    "\030\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\042\uffdf\043" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\054\uffdf\055\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\001\002\000\004\026\uffda\001\002\000" +
    "\026\004\006\005\012\006\014\010\004\025\016\033\013" +
    "\036\015\050\010\053\007\056\005\001\002\000\036\007" +
    "\027\010\024\011\033\012\031\014\026\015\034\016\035" +
    "\017\030\020\032\021\025\022\023\023\036\026\uffd7\043" +
    "\175\001\002\000\004\026\uffd8\001\002\000\034\007\027" +
    "\010\024\011\033\012\031\014\026\015\034\016\035\017" +
    "\030\020\032\021\025\022\023\023\036\030\201\001\002" +
    "\000\102\002\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\034\uffdd\035" +
    "\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\052\202\054\uffdd\055\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\001\002\000\026\004\006\005\012\006\014\010\004" +
    "\025\016\033\013\036\015\050\010\053\007\056\005\001" +
    "\002\000\074\002\ufffd\007\027\010\024\011\033\012\031" +
    "\014\026\015\034\016\035\017\030\020\032\021\025\022" +
    "\023\023\036\026\ufffd\030\ufffd\034\ufffd\035\ufffd\037\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\054" +
    "\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd\001\002\000\034" +
    "\007\027\010\024\011\033\012\031\014\026\015\034\016" +
    "\035\017\030\020\032\021\025\022\023\023\036\034\205" +
    "\001\002\000\026\004\006\005\012\006\014\010\004\025" +
    "\016\033\013\036\015\050\010\053\007\056\005\001\002" +
    "\000\074\002\uffec\007\027\010\024\011\033\012\031\014" +
    "\026\015\034\016\035\017\030\020\032\021\025\022\023" +
    "\023\036\026\uffec\030\uffec\034\uffec\035\207\037\uffec\040" +
    "\uffec\042\uffec\043\uffec\045\uffec\046\uffec\047\uffec\054\uffec" +
    "\055\uffec\057\uffec\060\uffec\061\uffec\001\002\000\026\004" +
    "\006\005\012\006\014\010\004\025\016\033\013\036\015" +
    "\050\010\053\007\056\005\001\002\000\074\002\uffed\007" +
    "\027\010\024\011\033\012\031\014\026\015\034\016\035" +
    "\017\030\020\032\021\025\022\023\023\036\026\uffed\030" +
    "\uffed\034\uffed\035\uffed\037\uffed\040\uffed\042\uffed\043\uffed" +
    "\045\uffed\046\uffed\047\uffed\054\uffed\055\uffed\057\uffed\060" +
    "\uffed\061\uffed\001\002\000\004\002\001\001\002\000\004" +
    "\024\213\001\002\000\026\004\006\005\012\006\014\010" +
    "\004\025\016\033\013\036\015\050\010\053\007\056\005" +
    "\001\002\000\034\007\027\010\024\011\033\012\031\014" +
    "\026\015\034\016\035\017\030\020\032\021\025\022\023" +
    "\023\036\054\215\001\002\000\026\004\006\005\012\006" +
    "\014\010\004\025\016\033\013\036\015\050\010\053\007" +
    "\056\005\001\002\000\034\007\027\010\024\011\033\012" +
    "\031\014\026\015\034\016\035\017\030\020\032\021\025" +
    "\022\023\023\036\057\217\001\002\000\030\004\006\005" +
    "\012\006\014\010\004\025\016\033\013\036\015\050\010" +
    "\053\007\056\005\061\221\001\002\000\036\007\027\010" +
    "\024\011\033\012\031\014\026\015\034\016\035\017\030" +
    "\020\032\021\025\022\023\023\036\055\223\061\224\001" +
    "\002\000\004\055\222\001\002\000\074\002\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\026\uffe4\030\uffe4" +
    "\034\uffe4\035\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\001\002\000\074\002\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\026\uffe7\030\uffe7\034\uffe7\035" +
    "\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\054\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\001" +
    "\002\000\030\004\006\005\012\006\014\010\004\025\016" +
    "\033\013\036\015\050\010\053\007\055\226\056\005\001" +
    "\002\000\034\007\027\010\024\011\033\012\031\014\026" +
    "\015\034\016\035\017\030\020\032\021\025\022\023\023" +
    "\036\055\227\001\002\000\074\002\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe6\030\uffe6\034\uffe6" +
    "\035\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\001\002\000\074\002\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\026\uffe5\030\uffe5\034\uffe5\035\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\054\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\001\002\000" +
    "\026\004\006\005\012\006\014\010\004\025\016\033\013" +
    "\036\015\050\010\053\007\056\005\001\002\000\034\007" +
    "\027\010\024\011\033\012\031\014\026\015\034\016\035" +
    "\017\030\020\032\021\025\022\023\023\036\026\232\001" +
    "\002\000\004\057\233\001\002\000\030\004\006\005\012" +
    "\006\014\010\004\025\016\033\013\036\015\050\010\053" +
    "\007\056\005\061\235\001\002\000\036\007\027\010\024" +
    "\011\033\012\031\014\026\015\034\016\035\017\030\020" +
    "\032\021\025\022\023\023\036\060\237\061\240\001\002" +
    "\000\004\060\236\001\002\000\074\002\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\026\uffe0\030\uffe0\034" +
    "\uffe0\035\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\054\uffe0\055\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\001\002\000\074\002\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\026\uffe3\030\uffe3\034\uffe3\035\uffe3" +
    "\037\uffe3\040\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\054\uffe3\055\uffe3\057\uffe3\060\uffe3\061\uffe3\001\002" +
    "\000\030\004\006\005\012\006\014\010\004\025\016\033" +
    "\013\036\015\050\010\053\007\056\005\060\242\001\002" +
    "\000\034\007\027\010\024\011\033\012\031\014\026\015" +
    "\034\016\035\017\030\020\032\021\025\022\023\023\036" +
    "\060\243\001\002\000\074\002\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\026\uffe2\030\uffe2\034\uffe2\035" +
    "\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2\061\uffe2\001" +
    "\002\000\074\002\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\026\uffe1\030\uffe1\034\uffe1\035\uffe1\037\uffe1" +
    "\040\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\054" +
    "\uffe1\055\uffe1\057\uffe1\060\uffe1\061\uffe1\001\002\000\074" +
    "\002\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\026\ufff6\030\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\042" +
    "\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\054\ufff6\055\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\002\010\003\016\001\001\000\006\002" +
    "\243\003\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\203\003\016\001\001\000\002" +
    "\001\001\000\024\011\071\012\072\013\102\014\070\015" +
    "\067\016\077\017\073\020\101\021\074\001\001\000\010" +
    "\002\054\003\016\005\055\001\001\000\002\001\001\000" +
    "\006\002\052\003\016\001\001\000\006\002\021\003\016" +
    "\001\001\000\002\001\001\000\006\002\051\003\016\001" +
    "\001\000\006\002\050\003\016\001\001\000\006\002\047" +
    "\003\016\001\001\000\006\002\046\003\016\001\001\000" +
    "\006\002\045\003\016\001\001\000\006\002\044\003\016" +
    "\001\001\000\006\002\043\003\016\001\001\000\006\002" +
    "\042\003\016\001\001\000\006\002\041\003\016\001\001" +
    "\000\006\002\040\003\016\001\001\000\006\002\037\003" +
    "\016\001\001\000\006\002\036\003\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\062" +
    "\003\016\001\001\000\004\006\063\001\001\000\002\001" +
    "\001\000\006\002\065\003\016\001\001\000\004\006\066" +
    "\001\001\000\002\001\001\000\014\011\071\012\072\013" +
    "\102\016\162\017\163\001\001\000\006\014\070\015\161" +
    "\001\001\000\022\011\071\012\072\013\102\014\070\015" +
    "\067\016\157\017\156\020\160\001\001\000\006\012\072" +
    "\013\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\071\014\070\015" +
    "\067\016\104\020\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\111\024\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\113" +
    "\001\001\000\004\023\114\001\001\000\002\001\001\000" +
    "\004\025\115\001\001\000\002\001\001\000\004\022\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\123\001\001\000\004\022\126\001\001\000\002\001\001" +
    "\000\006\002\125\003\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\131\022\133" +
    "\001\001\000\002\001\001\000\006\023\111\024\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\142\001\001\000\002\001\001\000\006" +
    "\002\144\003\016\001\001\000\002\001\001\000\006\023" +
    "\111\024\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\152\003\016\004\151\001\001\000\002\001" +
    "\001\000\004\006\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\177\003\016\001\001\000" +
    "\010\002\170\003\016\027\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\175" +
    "\003\016\001\001\000\004\030\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\202" +
    "\003\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\205\003\016\001\001\000\002\001\001\000\006" +
    "\002\207\003\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\213\003\016\001\001" +
    "\000\002\001\001\000\006\002\215\003\016\001\001\000" +
    "\002\001\001\000\006\002\217\003\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\224\003\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\230\003" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\233\003\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\240" +
    "\003\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ErrorMsg.ErrorMsg errorMsg;

    public void syntax_error(java_cup.runtime.Symbol current)
    {
        report_error("Syntax error", current);
    }
   
    public void report_error(String message, java_cup.runtime.Symbol tok)
    {
        errorMsg.error(new ErrorMsg.Pos(tok.left, tok.right), message);
    }
    
    public Parser(Lexer l, ErrorMsg.ErrorMsg err)
    {
        this(l);
        errorMsg = err;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    static ErrorMsg.Pos pos(int left, int right)
    {
        return new ErrorMsg.Pos(left, right);
    }

    static <A,B> Util.Pair<A,B> pair(A a, B b)
    {
        return new Util.Pair<A,B>(a,b);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // begFunctionDecList ::= functionDecs begTypeDecList 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<FunctionDec> d = (Lst<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(new MutualFunctionDecs(pos(dleft,dright), d), ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begFunctionDecList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // begFunctionDecList ::= functionDecs begVarDecList 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<FunctionDec> d = (Lst<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(new MutualFunctionDecs(pos(dleft,dright), d), ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begFunctionDecList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // begFunctionDecList ::= functionDecs 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<FunctionDec> d = (Lst<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(new MutualFunctionDecs(pos(dleft,dright), d), new Lst<Dec>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begFunctionDecList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // begTypeDecList ::= typeDecs begFunctionDecList 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<TypeDec> d = (Lst<TypeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(new MutualTypeDecs(pos(dleft,dright), d), ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begTypeDecList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // begTypeDecList ::= typeDecs begVarDecList 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<TypeDec> d = (Lst<TypeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(new MutualTypeDecs(pos(dleft,dright), d), ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begTypeDecList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // begTypeDecList ::= typeDecs 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<TypeDec> d = (Lst<TypeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(new MutualTypeDecs(pos(dleft,dright), d), new Lst<Dec>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begTypeDecList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // begVarDecList ::= varDec begTypeDecList 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDec d = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begVarDecList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // begVarDecList ::= varDec begFunctionDecList 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDec d = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begVarDecList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // begVarDecList ::= varDec begVarDecList 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDec d = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begVarDecList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // begVarDecList ::= varDec 
            {
              Lst<Dec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDec d = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Dec>(d, new Lst<Dec>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begVarDecList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // decList ::= begTypeDecList 
            {
              Lst<Dec> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decList ::= begFunctionDecList 
            {
              Lst<Dec> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decList ::= begVarDecList 
            {
              Lst<Dec> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decList",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // typeDecs ::= typeDec 
            {
              Lst<TypeDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDec d = (TypeDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<TypeDec>(d, new Lst<TypeDec>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDecs",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // typeDecs ::= typeDec typeDecs 
            {
              Lst<TypeDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDec d = (TypeDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<TypeDec> ds = (Lst<TypeDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<TypeDec>(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDecs",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // typeDec ::= TYPE ID EQ ty 
            {
              TypeDec RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object TYPE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Symbol.Symbol name = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDec(pos(TYPEleft,tyright), name, ty); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeDec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // functionDecs ::= functionDec 
            {
              Lst<FunctionDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<FunctionDec>(d, new Lst<FunctionDec>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // functionDecs ::= functionDec functionDecs 
            {
              Lst<FunctionDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<FunctionDec> ds = (Lst<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<FunctionDec>(d, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // functionDec ::= FUNCTION ID LPAREN fields RPAREN constraint EQ exp 
            {
              FunctionDec RESULT =null;
		int FUNCTIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int FUNCTIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object FUNCTION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Symbol.Symbol name = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Lst<Field<NameTy>> params = (Lst<Field<NameTy>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int resultleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameTy result = (NameTy)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionDec(pos(FUNCTIONleft,bodyright), name, params, result, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varDec ::= VAR ID constraint ASSIGN LKEY fields RKEY 
            {
              VarDec RESULT =null;
		int VARleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int VARright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object VAR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Symbol.Symbol v = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NameTy c = (NameTy)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<Field<NameTy>> params = (Lst<Field<NameTy>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varDec ::= VAR ID constraint ASSIGN exp 
            {
              VarDec RESULT =null;
		int VARleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int VARright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object VAR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Symbol.Symbol v = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameTy c = (NameTy)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDec(pos(VARleft,eright), v, c, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ty ::= LKEY fields RKEY 
            {
              Ty RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<Field<NameTy>> params = (Lst<Field<NameTy>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordTy(pos(xleft,zright), params); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ty",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ty ::= ARRAY OF namety 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameTy t = (NameTy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(pos(aleft,tright), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ty",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ty ::= namety 
            {
              Ty RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameTy ty = (NameTy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ty; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ty",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fieldsRest ::= 
            {
              Lst<Field<NameTy>> RESULT =null;
		 RESULT = new Lst<Field<NameTy>>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsRest",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fieldsRest ::= COMMA field fieldsRest 
            {
              Lst<Field<NameTy>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Field<NameTy> f = (Field<NameTy>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Field<NameTy>> fs = (Lst<Field<NameTy>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Field<NameTy>>(f, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsRest",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fields ::= 
            {
              Lst<Field<NameTy>> RESULT =null;
		 RESULT = new Lst<Field<NameTy>>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fields ::= field fieldsRest 
            {
              Lst<Field<NameTy>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Field<NameTy> f = (Field<NameTy>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Field<NameTy>> fs = (Lst<Field<NameTy>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Field<NameTy>>(f, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // field ::= ID COLON namety 
            {
              Field<NameTy> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Symbol.Symbol name = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Field<NameTy>(pos(nameleft,typeright), name, type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constraint ::= 
            {
              NameTy RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constraint ::= COLON namety 
            {
              NameTy RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameTy type = (NameTy)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // namety ::= ID 
            {
              NameTy RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol.Symbol type = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NameTy(pos(typeleft,typeright), type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namety",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expSeqRest ::= 
            {
              Lst<Exp> RESULT =null;
		 RESULT = new Lst<Exp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expSeqRest",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expSeqRest ::= SEMICOLON exp expSeqRest 
            {
              Lst<Exp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Exp> rest = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Exp>(x, rest); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expSeqRest",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expSeq2 ::= exp SEMICOLON exp expSeqRest 
            {
              Lst<Exp> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Exp> rest = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Exp>(x, new Lst<Exp>(y, rest)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expSeq2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expSeq ::= 
            {
              Lst<Exp> RESULT =null;
		 RESULT = new Lst<Exp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expSeq",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expSeq ::= exp expSeqRest 
            {
              Lst<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Exp> es = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Exp>(e, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expSeq",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expListRest ::= 
            {
              Lst<Exp> RESULT =null;
		 RESULT = new Lst<Exp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expListRest",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expListRest ::= COMMA exp expListRest 
            {
              Lst<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Exp> es = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Exp>(e, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expListRest",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expList ::= 
            {
              Lst<Exp> RESULT =null;
		 RESULT = new Lst<Exp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expList ::= exp expListRest 
            {
              Lst<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Lst<Exp> es = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Lst<Exp>(e, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= ID DOT ID 
            {
              Var RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Symbol.Symbol name1 = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol.Symbol name2 = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldsVar(pos(name1left,name2right),name1,name2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= var LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubscriptVar(pos(vleft,rright), v, index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= ID LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Symbol.Symbol id = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SubscriptVar(pos(idleft,rright), new SimpleVar(pos(idleft,idright), id), index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol.Symbol id = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleVar(pos(idleft,idright), id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= ID LPAREN expList RPAREN 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Symbol.Symbol f = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<Exp> es = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CallExp(pos(fleft,Rright), f, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= WHILE LPAREN exp RPAREN DO BREAK ENDWHILE 
            {
              Exp RESULT =null;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileExp(pos(Wleft,Eright), test, null,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= WHILE LPAREN exp RPAREN DO exp BREAK exp ENDWHILE 
            {
              Exp RESULT =null;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileExp(pos(Wleft,Eright), test, a,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= WHILE LPAREN exp RPAREN DO exp BREAK ENDWHILE 
            {
              Exp RESULT =null;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileExp(pos(Wleft,Eright), test, a,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= WHILE LPAREN exp RPAREN DO exp ENDWHILE 
            {
              Exp RESULT =null;
		int Wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int Wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object W = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileExp(pos(Wleft,Eright), test, a,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= FOR ID ASSIGN exp TO exp DO BREAK ENDFOR 
            {
              Exp RESULT =null;
		int FORleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int FORright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object FOR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Symbol.Symbol id = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForExp(pos(FORleft,Eright), id, init, test, null, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= FOR ID ASSIGN exp TO exp DO exp BREAK exp ENDFOR 
            {
              Exp RESULT =null;
		int FORleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int FORright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object FOR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Symbol.Symbol id = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForExp(pos(FORleft,Eright), id, init, test, a, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= FOR ID ASSIGN exp TO exp DO exp BREAK ENDFOR 
            {
              Exp RESULT =null;
		int FORleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int FORright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object FOR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Symbol.Symbol id = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForExp(pos(FORleft,Eright), id, init, test, a, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= FOR ID ASSIGN exp TO exp DO exp ENDFOR 
            {
              Exp RESULT =null;
		int FORleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int FORright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object FOR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Symbol.Symbol id = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForExp(pos(FORleft,Eright), id, init, test, a, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= LPAREN RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SeqExp(pos(lleft,rright), new Lst<Exp>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= LPAREN expSeq2 RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<Exp> xs = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SeqExp(pos(lleft,rright), xs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= LET decList IN expSeq END 
            {
              Exp RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Lst<Dec> ds = (Lst<Dec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Lst<Exp> es = (Lst<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LetExp(pos(Lleft,Eright), ds, new SeqExp(pos(esleft,esright), es)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= IF exp THEN exp 
            {
              Exp RESULT =null;
		int IFleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IFright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object IF = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfExp(pos(IFleft,aright), test, a, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int IFleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int IFright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object IF = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfExp(pos(IFleft,bright), test, a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp OR exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfExp(pos(xleft,yright), x, new NumExp(pos(-1,-1), 1), y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfExp(pos(xleft,yright), x, y, new NumExp(pos(-1,-1), 0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp GE exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp GT exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp LE exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp LT exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp NE exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.NE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp EQ exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(oleft,xright), new NumExp(pos(oleft,oright), 0), x, Operator.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp DIV exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.DIV); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.TIMES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExp(pos(xleft,yright), x, y, Operator.PLUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= var ASSIGN exp 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignExp(pos(vleft,eright), v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= var 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var x = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExp(pos(xleft,xright), x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= ID LBRACK exp RBRACK OF exp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Symbol.Symbol t = (Symbol.Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayExp(pos(tleft,initright), new NameTy(pos(tleft,tright), t), size, init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= STRING 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringExp(pos(xleft,xright), x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= INTEGER 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumExp(pos(xleft,xright), x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp ::= NIL 
            {
              Exp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NilExp(pos(xleft,xright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

